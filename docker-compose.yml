# version: '3.8'

services:
  # Kafka Controller for KRaft mode (one of the brokers acting as controller)
  kafka-1:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - "9091:9091"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka-1:19092,CONTROLLER://kafka-1:9093,PLAINTEXT_HOST://0.0.0.0:9091
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: "true"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data_1:/var/lib/kafka/data
    networks:
      - shared-net
    healthcheck:
      test: kafka-topics --bootstrap-server kafka-1:19092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kafka Broker 2 (chỉ là broker)
  kafka-2:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-2
    container_name: kafka-2
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: "true"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data_2:/var/lib/kafka/data
    networks:
      - shared-net
    depends_on:
      kafka-1:
        condition: service_healthy
    healthcheck:
      test: kafka-topics --bootstrap-server kafka-2:19092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kafka Broker 3 (chỉ là broker)
  kafka-3:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-3
    container_name: kafka-3
    ports:
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: "true"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data_3:/var/lib/kafka/data
    networks:
      - shared-net
    depends_on:
      kafka-1:
        condition: service_healthy
    healthcheck:
      test: kafka-topics --bootstrap-server kafka-3:19092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # MySQL Master Database
  mysql-master:
    image: mysql:8.0 # [important] - MySQL 8.0 image for replication support
    container_name: mysql-master # [important] - Fixed container name for network communication
    restart: always # [optional] - Auto restart on failure
    environment:
      MYSQL_ROOT_PASSWORD: root123 # [important] - Root password for database access
      # MYSQL_DATABASE: tinyurl # [removed] - No default database creation, will be created later and replicated
      MYSQL_REPLICATION_USER: repl # [important] - Replication user for slave connection
      MYSQL_REPLICATION_PASSWORD: repl123 # [important] - Replication password
      TZ: UTC # [changed] - Using UTC timezone for consistent timestamps
    ports:
      - "3307:3306" # [important] - External port mapping for master access
    volumes:
      - ./configs/mysql/master:/docker-entrypoint-initdb.d:ro # [important] - Init scripts for replication setup
      - ./configs/mysql/master/my.cnf:/etc/mysql/conf.d/my.cnf:ro # [important] - Master configuration file
      - mysql_master_data:/var/lib/mysql # [important] - Persistent data storage
    command: --default-authentication-plugin=mysql_native_password --log-error-verbosity=3 --gtid-mode=ON --enforce-gtid-consistency=ON --server-id=1 # [important] - MySQL 8.0 compatibility settings with GTID mode enabled and explicit server-id
    networks: 
      - mysql-net # [important] - Internal network for master-slave communication
      - shared-net # [optional] - Shared network for other services
    healthcheck: # [important] - Health check for dependency management
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot123"]
      timeout: 20s
      retries: 15
      interval: 10s
      start_period: 60s
  mysql-slave:
    image: mysql:8.0 # [important] - Same MySQL version as master for compatibility
    container_name: mysql-slave # [important] - Fixed container name for network communication
    restart: always # [optional] - Auto restart on failure
    environment:
      MYSQL_ROOT_PASSWORD: root123 # [important] - Same root password as master
      # MYSQL_DATABASE: tinyurl # [fixed] - Commented out to prevent conflict with replication setup
      MYSQL_REPLICATION_USER: repl # [important] - Must match master replication user
      MYSQL_REPLICATION_PASSWORD: repl123 # [important] - Must match master replication password
      MYSQL_MASTER_HOST: mysql-master # [important] - Master hostname for replication connection
      TZ: UTC # [changed] - Using UTC timezone for consistent timestamps
    ports:
      - "3308:3306" # [important] - Different external port from master
    volumes:
      - ./configs/mysql/slave:/docker-entrypoint-initdb.d:ro # [fixed] - Updated slave init scripts for manual replication setup
      - ./configs/mysql/slave/my.cnf:/etc/mysql/conf.d/my.cnf:ro # [important] - Slave configuration file
      - mysql_slave_data:/var/lib/mysql # [important] - Separate persistent data storage
    command: --default-authentication-plugin=mysql_native_password --log-error-verbosity=3 --gtid-mode=ON --enforce-gtid-consistency=ON --server-id=2 # [important] - Same MySQL settings as master with GTID mode enabled and different server-id
    networks:
      - mysql-net # [important] - Same network as master for communication
      - shared-net # [optional] - Shared network for other services
    depends_on:
      mysql-master:
        condition: service_healthy # [important] - Wait for master to be ready before starting slave
    healthcheck: # [important] - Health check for service status
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot123"]
      timeout: 20s
      retries: 15
      interval: 10s
      start_period: 80s # [fixed] - Increased from 60s to allow master to fully initialize
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - shared-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Init Runner - Handles replication setup and schema initialization
  init-runner:
    build: 
      context: ./init-runner
      dockerfile: Dockerfile
    container_name: init-runner
    restart: "no"
    volumes:
      - ./init-runner/scripts:/scripts
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mysql-net
      - shared-net

  # Analytics Real-time Service
  analytics-realtime-service:
    build:
      context: ./tinyUrlBackend/services/analystic-realtime-service
      dockerfile: Dockerfile
    container_name: analytics-realtime-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      NODE_ENV: production
      PORT: 8082
      # Database Configuration - MASTER (Write operations)
      DB_MASTER_HOST: mysql-master
      DB_MASTER_PORT: 3306
      DB_MASTER_USERNAME: root
      DB_MASTER_PASSWORD: root123
      DB_MASTER_DATABASE: analytics_realtime_service
      # Database Configuration - SLAVE (Read operations)
      DB_SLAVE_HOST: mysql-slave
      DB_SLAVE_PORT: 3306
      DB_SLAVE_USERNAME: root
      DB_SLAVE_PASSWORD: root123
      DB_SLAVE_DATABASE: analytics_realtime_service
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DATABASE: 2
      REDIS_PASSWORD: ""
      REDIS_TTL: 300
      # Kafka Configuration
      KAFKA_BROKERS: kafka-1:19092,kafka-2:19092,kafka-3:19092
      KAFKA_CLIENT_ID: analytics-realtime-service
      KAFKA_GROUP_ID: analytics-realtime-group
      # External Services
      URL_SERVICE_BASE_URL: http://url-service:8081
      BATCH_SERVICE_BASE_URL: http://analytics-batch-service:8083
      SERVICE_TIMEOUT: 5000
      # API Gateway Configuration
      API_GATEWAY_USER_ID_HEADER: X-User-Id
      # Timezone Configuration
      TZ: UTC
      # Cache TTL Configuration (seconds)
      CACHE_LOCATION_TTL: 3600
      CACHE_DEVICE_TTL: 3600
      CACHE_CLICK_STATS_TTL: 60
      CACHE_USER_URLS_TTL: 300
      # Real-time Configuration
      WEBSOCKET_CORS_ORIGIN: "*"
      WEBSOCKET_NAMESPACE: /analytics
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      init-runner:
        condition: service_completed_successfully
    networks:
      - shared-net
      - mysql-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/api/v1/analytics/system"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  kafka_data_1:
  kafka_data_2:
  kafka_data_3:
  mysql_master_data:
    driver: local
  mysql_slave_data:
    driver: local
  redis_data:

networks:
  shared-net:
    driver: bridge
  mysql-net:
    driver: bridge